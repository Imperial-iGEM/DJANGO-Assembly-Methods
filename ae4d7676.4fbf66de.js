(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return b})),n.d(t,"default",(function(){return s}));var a=n(2),l=n(6),r=(n(0),n(93)),o={sidebar_label:"sbol_parser_api.sbol_parser_api",title:"sbol_parser_api.sbol_parser_api"},i={unversionedId:"reference/sbol_parser_api/sbol_parser_api",id:"reference/sbol_parser_api/sbol_parser_api",isDocsHomePage:!1,title:"sbol_parser_api.sbol_parser_api",description:"ParserSBOL Objects",source:"@site/docs/reference/sbol_parser_api/sbol_parser_api.md",slug:"/reference/sbol_parser_api/sbol_parser_api",permalink:"/DJANGO-Assembly-Methods/docs/reference/sbol_parser_api/sbol_parser_api",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/reference/sbol_parser_api/sbol_parser_api.md",version:"current",sidebar_label:"sbol_parser_api.sbol_parser_api",sidebar:"someSidebar",previous:{title:"basic_assembly.dna_bot.dnabot_app",permalink:"/DJANGO-Assembly-Methods/docs/reference/basic_assembly/dna_bot/dnabot_app"},next:{title:"Style Guide",permalink:"/DJANGO-Assembly-Methods/docs/"}},b=[{value:"ParserSBOL Objects",id:"parsersbol-objects",children:[]}],c={rightToc:b};function s(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"parsersbol-objects"},"ParserSBOL Objects"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"}),"class ParserSBOL()\n")),Object(r.b)("h4",{id:"generate_csv"},"generate","_","csv"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"})," | generate_csv(assembly: str, part_info: Dict[str, Dict[str, Union[str, int, float]]] = None, repeat: bool = False, max_construct_wells: int = 96, num_runs: int = 1) -> Dict[str, List[str]]\n")),Object(r.b)("p",null,"Create construct and parts/linkers CSVs for DNABot input"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"assembly(str)")," - Assembly type.\npart_info (Dict[str, Dict[str, Union","[str, int, float]","]]):\nDictionary of information regarding parts to be assembled.\nStructure:\n{","<","display ID",">",": {","'","concentration","'",":..., ","'","plate","'",":..., ","'","well","'",":...}}"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"repeat")," ",Object(r.b)("em",{parentName:"li"},"bool")," - If False, removes constructs that contain repeated\ncomponents. (default: False)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"max_construct_wells")," ",Object(r.b)("em",{parentName:"li"},"int")," - Number of wells to be filled in the\nconstructs plate. (default: 96)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"num_runs")," ",Object(r.b)("em",{parentName:"li"},"int")," - Number of runs (i.e. construct plates) to be\ncreated. (default: 1)")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Dict[str,List[str]]")," - Dictionary containing lists of paths to csvs\ngenerated.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Raises"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ValueError")," - If ",Object(r.b)("inlineCode",{parentName:"li"},"assembly")," is invalid.")),Object(r.b)("h4",{id:"get_root_compdefs"},"get","_","root","_","compdefs"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"})," | get_root_compdefs(sbol_document: Document = None) -> List[ComponentDefinition]\n")),Object(r.b)("p",null,"Get the root component definitions of an SBOL document."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"sbol_document")," ",Object(r.b)("em",{parentName:"li"},"Document")," - SBOL document from\nwhich to get root component definitions (default: self.doc)")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"list")," - List of root component definitions.")),Object(r.b)("h4",{id:"get_root_combderivs"},"get","_","root","_","combderivs"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"})," | get_root_combderivs(sbol_document: Document = None) -> List[CombinatorialDerivation]\n")),Object(r.b)("p",null,"Get the root combinatorial derivations of an SBOL Document."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"sbol_document")," ",Object(r.b)("em",{parentName:"li"},"Document")," - SBOL document from\nwhich to get root combinatorial derivations (default: self.doc)")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"list")," - List of root combinatorial derivations.")),Object(r.b)("h4",{id:"get_constructs"},"get","_","constructs"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"})," | get_constructs(non_comb_uris: List[str] = [], comb_uris: List[str] = []) -> List[ComponentDefinition]\n")),Object(r.b)("p",null,"Get the list of constructs (component definitions) specified by\nthe list of non-combinatorial URIs and combinatorial derivation URIs.\nExpands combinatorial derivations."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"non_comb_uris")," ",Object(r.b)("em",{parentName:"li"},"list")," - List of component definition\nURIs pointing to non-combinatorial designs."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"comb_uris")," ",Object(r.b)("em",{parentName:"li"},"list")," - List of combinatorial derivation\nURIs pointing to combinatorial designs.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"list")," - List of component definitions specifying constructs\nto be assembled")),Object(r.b)("h4",{id:"enumerator"},"enumerator"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"})," | enumerator(derivation: CombinatorialDerivation) -> List[ComponentDefinition]\n")),Object(r.b)("p",null,"Get the list of constructs enumerated from a combinatorial derivation.."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"derivation")," ",Object(r.b)("em",{parentName:"li"},"CombinatorialDerivation")," - Combinatorial derivation\nto be enumerated.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"list")," - List of component definitions specifying the\nenumerated constructs.")),Object(r.b)("h4",{id:"filter_constructs"},"filter","_","constructs"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"})," | filter_constructs(all_constructs: List[ComponentDefinition]) -> List[ComponentDefinition]\n")),Object(r.b)("p",null,"Removes constructs with repeated components."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"all_constructs")," ",Object(r.b)("em",{parentName:"li"},"List","[ComponentDefinition]")," - List of constructs\nto filter.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"List[ComponentDefinition]")," - List of filtered constructs.")),Object(r.b)("h4",{id:"flatten"},"flatten"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"})," | flatten(construct: ComponentDefinition) -> List[ComponentDefinition]\n")),Object(r.b)("p",null,"Flattens a heirarchical component definition."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"construct")," ",Object(r.b)("em",{parentName:"li"},"ComponentDefinition")," - Component definition to\nflatten.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"List[ComponentDefinition]")," - Returns a list of component\ndefinitions corresponding to the components contained\nwithin the component definition including all\nnested components.")),Object(r.b)("h4",{id:"display_parts"},"display","_","parts"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"})," | display_parts() -> List[str]\n")),Object(r.b)("p",null,"Displays list of parts used in the assembly of the constructs\nin the SBOL document used to initialize the parser."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"List[str]")," - List of display IDs of parts.")),Object(r.b)("h4",{id:"get_parts"},"get","_","parts"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"})," | get_parts(all_constructs: List[ComponentDefinition] = []) -> List[ComponentDefinition]\n")),Object(r.b)("p",null,"Get list of parts (component defintions) from the list of\nall constructs."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"all_constructs")," ",Object(r.b)("em",{parentName:"li"},"list")," - List of all constructs to be assembled.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"list")," - List of component definitions specifying parts used across\nall constructs to be assembled.")),Object(r.b)("h4",{id:"get_sorted_parts"},"get","_","sorted","_","parts"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"})," | get_sorted_parts(parts: List[ComponentDefinition]) -> List[ComponentDefinition]\n")),Object(r.b)("p",null,"Get a sorted list of parts (str) from the list of parts.\nSort by sbol2 displayId"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"parts")," ",Object(r.b)("em",{parentName:"li"},"list")," - List of parts to be sorted.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"list")," - List of sorted parts (str)")),Object(r.b)("h4",{id:"get_comp_dict"},"get","_","comp","_","dict"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"})," | get_comp_dict(constructs: List[ComponentDefinition]) -> Dict[str, ComponentDefinition]\n")),Object(r.b)("p",null,"Get a dictionary of components (as component definitions)\nfrom the list of constructs as\n{construct.displayId: construct.components (as component definitions)}"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"constructs")," ",Object(r.b)("em",{parentName:"li"},"list")," - List of constructs")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"dict")," - Dictionary of components")),Object(r.b)("h4",{id:"fill_plates"},"fill","_","plates"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"})," | fill_plates(all_content: List[ComponentDefinition], content_name: str, num_plate: int = None, plate_class: plateo.Plate = None, max_construct_wells: int = None, part_info: Dict[str, Dict[str, Union[str, int, float]]] = None) -> List[plateo.Plate]\n")),Object(r.b)("p",null,"Generate a list of plateo plate objects from list of constructs"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"all_content")," ",Object(r.b)("em",{parentName:"li"},"list")," - List of constructs."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"content_name")," ",Object(r.b)("em",{parentName:"li"},"str")," - Name of content (construct or part)."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"num_plate")," ",Object(r.b)("em",{parentName:"li"},"int")," - Number of plates to be generated (default = 1).\nplate_class (plateo.Plate):\nClass of plateo plate (default = Plate96)."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"max_construct_wells")," ",Object(r.b)("em",{parentName:"li"},"int")," - Maximum number of filled\nwells on a plate.\npart_info (Dict[str, Dict[str, Union","[str, int, float]","]]):\nDictionary of parts and associated information")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"list")," - List of plates")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Raises"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ValueError")," - If parameters are not feasible.")),Object(r.b)("h4",{id:"get_all_content_from_plate"},"get","_","all","_","content","_","from","_","plate"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"})," | get_all_content_from_plate(content_plate: plateo.Plate, content_name: str) -> List[ComponentDefinition]\n")),Object(r.b)("p",null,"Get a list of all content (as component definitions) from a\nPlateo plate."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"content_plate")," ",Object(r.b)("em",{parentName:"li"},"plateo.Plate")," - Plateo plate containing content."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"content_name")," ",Object(r.b)("em",{parentName:"li"},"str")," - Name of content (",'"',"construct",'"'," or ",'"',"part",'"',").")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"list")," - List of all content (as component definitions).")),Object(r.b)("h4",{id:"get_construct_df_from_plate"},"get","_","construct","_","df","_","from","_","plate"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"})," | get_construct_df_from_plate(construct_plate: plateo.Plate, assembly: str) -> pd.DataFrame\n")),Object(r.b)("p",null,"Get dataframe of constructs from Plateo plate containing constructs."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"construct_plate")," ",Object(r.b)("em",{parentName:"li"},"plateo.Plate")," - Plateo plate containing constructs."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"assembly")," ",Object(r.b)("em",{parentName:"li"},"str")," - Type of assembly.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"pd.DataFrame")," - Dataframe of constructs.")),Object(r.b)("h4",{id:"get_construct_csv_from_plate"},"get","_","construct","_","csv","_","from","_","plate"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"})," | get_construct_csv_from_plate(construct_plate: plateo.Plate, assembly: str)\n")),Object(r.b)("p",null,"Convert construct dataframe into CSV and creates CSV file in the same\ndirectory."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"construct_plate")," ",Object(r.b)("em",{parentName:"li"},"plateo.Plate")," - Plateo plate containing constructs."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"uniqueId")," ",Object(r.b)("em",{parentName:"li"},"str")," - Unique ID appended to filename."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"assembly")," ",Object(r.b)("em",{parentName:"li"},"str")," - Type of assembly.")),Object(r.b)("h4",{id:"convert_linker_to_sp"},"convert","_","linker","_","to","_","sp"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"})," | convert_linker_to_sp(part_list: List[ComponentDefinition]) -> List[ComponentDefinition]\n")),Object(r.b)("p",null,"Convert all linkers contained in a list of parts into linker\nprefixes and suffixes."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"parts_list")," ",Object(r.b)("em",{parentName:"li"},"List","[ComponentDefinition]")," - List of parts\nused in the assembly of all constructs.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"List[ComponentDefinition]")," - List of parts with linkers\nconverted into linker prefixes and suffixes.")),Object(r.b)("h4",{id:"get_part_linker_df_from_plate"},"get","_","part","_","linker","_","df","_","from","_","plate"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"})," | get_part_linker_df_from_plate(part_plate: plateo.Plate) -> pd.DataFrame\n")),Object(r.b)("p",null,"Get part/linker dataframe from a plate."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"part_plate")," ",Object(r.b)("em",{parentName:"li"},"plateo.Plate")," - Plate containing parts used for the\nassembly of constructs.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Returns"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"pd.DataFrame")," - Dataframe of part/linkers and their associated\nwellname and concentration.")),Object(r.b)("h4",{id:"get_part_linker_csv_from_plate"},"get","_","part","_","linker","_","csv","_","from","_","plate"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-python"})," | get_part_linker_csv_from_plate(construct_plate: plateo.Plate, assembly: str, part_info: Dict[str, Dict[str, Union[str, int, float]]] = None)\n")),Object(r.b)("p",null,"Get part/linker CSV from plate."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arguments"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"construct_plate")," ",Object(r.b)("em",{parentName:"li"},"plateo.Plate")," - Construct plates from which\nparts and linkers are derived."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"assembly")," ",Object(r.b)("em",{parentName:"li"},"str")," - Type of assembly.\npart_info (Dict[str, Dict[str, Union","[str, int, float]","]]):\nDictionary of parts and associated information.")))}s.isMDXComponent=!0},93:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return O}));var a=n(0),l=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=l.a.createContext({}),s=function(e){var t=l.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return l.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},u=l.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=b(e,["components","mdxType","originalType","parentName"]),p=s(n),u=a,O=p["".concat(o,".").concat(u)]||p[u]||m[u]||r;return n?l.a.createElement(O,i(i({ref:t},c),{},{components:n})):l.a.createElement(O,i({ref:t},c))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var i={};for(var b in t)hasOwnProperty.call(t,b)&&(i[b]=t[b]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return l.a.createElement.apply(null,o)}return l.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);